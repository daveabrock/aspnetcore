<Project>

  <PropertyGroup>
    <_SpaProxyDllPath Condition="$(_SpaProxyDllPath) == ''">$(MSBuildThisFileDirectory)..\assets\Microsoft.AspNetCore.SpaProxy.dll</_SpaProxyDllPath>
  </PropertyGroup>
  
  <Target Name="WriteSpaConfigurationToDisk" BeforeTargets="AssignTargetPaths">
    <PropertyGroup>
      <_SpaProxyServerLaunchConfig>$(IntermediateOutputPath)spa.proxy.json</_SpaProxyServerLaunchConfig>
      <_SpaRootFullPath>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(SpaRoot)').Replace('\','\\'))</_SpaRootFullPath>
      <SpaProxyTimeoutInSeconds>60</SpaProxyTimeoutInSeconds>
    </PropertyGroup>
    <ItemGroup>
      <_SpaProxyServerLaunchConfigLines Include="{" />
      <_SpaProxyServerLaunchConfigLines Include="  &quot;SpaProxyServer&quot;: {" />
      <_SpaProxyServerLaunchConfigLines Include="    &quot;ServerUrl&quot;: &quot;$(SpaProxyServerUrl)&quot;," />
      <_SpaProxyServerLaunchConfigLines Include="    &quot;LaunchCommand&quot;: &quot;$(SpaLaunchCommand)&quot;," />
      <_SpaProxyServerLaunchConfigLines Include="    &quot;WorkingDirectory&quot;: &quot;$(_SpaRootFullPath)&quot;," />
      <_SpaProxyServerLaunchConfigLines Include="    &quot;MaxTimeoutInSeconds&quot;: &quot;$(SpaProxyTimeoutInSeconds)&quot;" />
      <_SpaProxyServerLaunchConfigLines Include="  }" />
      <_SpaProxyServerLaunchConfigLines Include="}" />
    </ItemGroup>
    <WriteLinesToFile File="$(_SpaProxyServerLaunchConfig)" Lines="@(_SpaProxyServerLaunchConfigLines)" WriteOnlyWhenDifferent="true" Overwrite="true" />
    <ItemGroup>
      <ContentWithTargetPath Include="$(_SpaProxyServerLaunchConfig)" CopyToOutputDirectory="PreserveNewest" CopyToPublishDirectory="Never" TargetPath="spa.proxy.json" />
      <FileWrites Include="$(_SpaProxyServerLaunchConfig)" />
    </ItemGroup>
  </Target>
  
  <Target Name="_CopyProxyToOutputFolder" AfterTargets="CopyFilesToOutputDirectory">
        <Copy
        SourceFiles="$(_SpaProxyDllPath)"
        DestinationFolder="$(OutDir)"
        SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
        OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
        Retries="$(CopyRetryCount)"
        RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
        UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
        UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
        ErrorIfLinkFails="$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>
    
  </Target>

</Project>
